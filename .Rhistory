remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444, browserName = "firefox")
remDr$open()
remDr$navigate(url)
# actions on page
css <- 'span.icon:nth-child(2)'
click_elem <- remDr$findElement(using = 'css', value = css)
open_elem <- click_elem$clickElement() # click on button
css <- '#find_wf'
click_elem <- remDr$findElement(using = 'css', value = css)
open_elem <- click_elem$clickElement() # click on button
output <- remDr$getPageSource(header = TRUE)
write(output[[1]], file = "starbucks-chicago.html")
remDr$closeServer()
content <- read_html("starbucks-chicago.html", encoding = "utf8")
store_names <- html_nodes(content, ".store-name") %>% html_text()
store_names
store_addresses <- html_nodes(content, ".address li:nth-child(1)") %>% html_text()
store_addresses
locations <- paste0(store_addresses, ", Chicago, IL")
locations
pos <- geocode(locations, source = "google")
head(pos)
starbucks_map <- get_map(location=c(lon=mean(pos$lon), lat=mean(pos$lat)), zoom="auto", maptype="hybrid")
p <- ggmap(starbucks_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=3)
p
starbucks_map <- get_map(location=c(lon=mean(pos$lon), lat=mean(pos$lat)), zoom=13, maptype="hybrid")
p <- ggmap(starbucks_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=3)
p
browseURL("http://ropensci.org/")
browseURL("http://arxiv.org/help/api/index")
browseURL("http://arxiv.org/help/api/user-manual")
browseURL("http://export.arxiv.org/api/query?search_query=all:forecast")
library(xml2)
forecast <- read_xml("http://export.arxiv.org/api/query?search_query=all:forecast")
forecast
xml_text(forecast)
xml_find_all(forecast, "//x:author", ns = xml_ns(x"http://www.w3.org/2005/Atom"))
xml_find_all(forecast, "//x:author", ns = xml_ns("http://www.w3.org/2005/Atom"))
xml_find_all(forecast, "//x:author")
browseURL("http://export.arxiv.org/api/query?search_query=all:forecast")
xml_find_all(forecast, "//author")
xml_find_all(forecast, "//author", ns = xml_ns(forecast))
xml_ns(forecast)
x <- read_xml('
<root xmlns:f = "http://foo.com" xmlns:g = "http://bar.com">
<f:doc><g:baz /></f:doc>
<f:doc><g:baz /></f:doc>
</root>
')
xml_find_all(x, ".//f:doc")
xml_find_all(x, ".//f:doc", xml_ns(x))
xml_find_all(forecast, "//d1:author", ns = xml_ns(forecast))
authors <- xml_find_all(forecast, "//d1:author", ns = xml_ns(forecast))
authors %>% xml_text()
source("00-course-setup.r")
wd <- getwd()
source("00-course-setup.r")
wd <- getwd()
authors <- xml_find_all(forecast, "//d1:author", ns = xml_ns(forecast))
authors %>% xml_text()
ls("package:aRxiv")
arxiv_df <- arxiv_search(query = "forecast", limit = 10, output_format = "data.frame")
View(arxiv_df)
query_terms
query_terms
arxiv_count('au:"Gary King"')
?arxiv_search
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201701012400], limit = 10, output_format = "data.frame")
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201701012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201001010000 TO 201601012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201401010000 TO 201601012400]", limit = 10, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[201601010000 TO 201701012400]", limit = 50, output_format = "data.frame")
View(arxiv_df)
ls("package:aRxiv")
lsf.str("package:aRxiv")
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[2016 TO 2017]", limit = 50, output_format = "data.frame")
View(arxiv_df)
arxiv_df <- arxiv_search(query = "forecast AND submittedDate:[2016 TO 2017]", limit = 1000, output_format = "data.frame")
View(arxiv_df)
arxiv_count('abs:"political" AND submittedDate:[2010 TO 2017]')
arxiv_count('abs:"political" AND submittedDate:[2016 TO 2017]')
polsci_articles <- arxiv_search('abs:"political" AND submittedDate:[2016 TO 2017]', limit = 1000)
View(polsci_articles)
library(pageviews)
ls("package:pageviews")
?article_pageviews
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2015010100", end = "20160720")
View(trump_views)
trump_views <- article_pageviews(project = "en.wikipedia", article = "Donald Trump", user_type = "user", start = "2016010100", end = "20160720")
View(trump_views)
?pageview_timestamps
clinton_views <- article_pageviews(project = "en.wikipedia", article = "Hillary Clinton", user_type = "user", start = "2016010100", end = "20160720")
head(trump_views)
plot(trump_views$views)
?ts
plot(trump_views$timestamp, trump_views$views)
as.Date(trump_views$timestamp)
?ymd
library(lubridate)
ymd(trump_views$timestamp)
ymd_h(trump_views$timestamp)
plot(ymd_h(trump_views$timestamp), trump_views$views)
plot(ymd_h(trump_views$timestamp), trump_views$views, type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
plot(ymd_h(trump_views$timestamp), trump_views$views, col = "red", type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
hist(clinton_views$views)
plot(ymd_h(trump_views$timestamp), trump_views$views, col = "red", type = "l")
lines(ymd_h(clinton_views$timestamp), clinton_views$views, col = "blue")
View(trump_views)
browseURL("http://www.enigma.io/")
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
source("00-course-setup.r")
wd <- getwd()
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
setup_twitter_oauth(api_key,api_secret)
install.packages("httpuv")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
tweets_df <- twListToDF(tweets)
head(tweets_df)
source("00-course-setup.r")
wd <- getwd()
# negotiate credentials
api_key <- Sys.getenv("twitter_api_key")
api_secret <- Sys.getenv("twitter_api_secret")
access_token <- Sys.getenv("twitter_access_token")
access_token_secret <- Sys.getenv("twitter_access_token_secret")
setup_twitter_oauth(api_key,api_secret)
tweets <- searchTwitter(searchString = "Trump", n=25, lang=NULL, since=NULL, until=NULL, locale=NULL, geocode=NULL, sinceID=NULL, retryOnRateLimit=120)
tweets_df <- twListToDF(tweets)
head(tweets_df)
names(tweets_df)
user <- getUser("RDataCollection")
user$name
user$lastStatus
user$followersCount
user$statusesCount
user_followers <- user$getFollowers()
user_friends <- user$getFriends()
user_timeline <- userTimeline(user, n=20)
timeline_df <- twListToDF(user_timeline)
head(timeline_df)
x <- GET("https://google.com")
x
j1 = GET(“http://www.omdbapi.com/?t=iron%20man%202&r=json”)
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=json”
)
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=json")
content(j1, as = “text”)
content(j1, as =  "text")
content(j1, as =  "parsed")
?content
j1 = GET("http://www.omdbapi.com/?t=iron%20man%202&r=xml")
content(j1, as =  "text")
content(j1, as =  "parsed")
browseURL("http://www.omdbapi.com/")
title <- "Groundhog Day" %>% URLencode()
title
url <- paste0("http://www.omdbapi.com/?t=", title)
url <- paste0("http://www.omdbapi.com/?t=", title, "&tomatoes=true")
url
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
class(res_list)
unlist(res_list)
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
content(omdb_res, as =  "parsed")
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
res_list
res_list %>% unlist()
url <- paste0("http://www.omdbapi.com/?s=", title)
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list
res_list %>% unlist()
raw_data <- fromJSON(omdb_res, flatten = TRUE)
raw_data <- jsonlite::fromJSON(omdb_res, flatten = TRUE)
omdb_res
raw_data <- content(omdb_res, as = "text"), %>% jsonlite::fromJSON(flatten = TRUE)
raw_data <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
raw_data
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
omdb_res = GET(url)
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list
res_list$Search %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
res_list$Search
class(res_list$Search)
title <- "Groundhog Day" %>% URLencode()
endpoint <- "http://www.omdbapi.com/"
url <- paste0(endpoint, "?", "t=", title, "&tomatoes=true")
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0(endpoint, "?t=", title, "&tomatoes=true")
omdb_res = GET(url)
res_list <- content(omdb_res, as =  "parsed")
res_list %>% unlist() %>% t() %>% data.frame(stringsAsFactors = FALSE)
url <- paste0(endpoint, "?s=", title)
omdb_res = GET(url)
res_list <- content(omdb_res, as = "text") %>% jsonlite::fromJSON(flatten = TRUE)
res_list$Search
apikey <- "&appid=42c7829f663f87eb05d2f12ab11f2b5d"
url <- paste0(endpoint, "q=", city, apikey)
city <- "Chicago,IL"
url <- paste0(endpoint, "q=", city, apikey)
url
GET(URL)
GET(url)
weather_res <- GET(url)
class(weather_res)
res_list <- content(weather_res, as =  "parsed")
res_list
endpoint <- "http://api.openweathermap.org/data/2.5/find?"
city <- "Chicago,IL"
url <- paste0(endpoint, "q=", city, apikey)
weather_res <- GET(url)
res_list <- content(weather_res, as =  "parsed")
res_list
res_list <- content(weather_res, as =  "text")  %>% jsonlite::fromJSON(flatten = TRUE)
res_list
res_list$list
metric <- "&units=metric"
url <- paste0(endpoint, "q=", city, metric, apikey)
weather_res <- GET(url)
res_list <- content(weather_res, as =  "parsed")
res_list <- content(weather_res, as =  "text")  %>% jsonlite::fromJSON(flatten = TRUE)
res_list$list
# install packages from CRAN
p_needed <- c("plyr", "dplyr", "stringr", "lubridate", "jsonlite", "httr", "xml2", "rvest", "devtools", "ggmap",  "networkD3", "RSelenium", "pageviews", "aRxiv", "twitteR", "streamR")
packages <- rownames(installed.packages())
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
lapply(p_needed, require, character.only = TRUE)
warnings()
source("00-course-setup.r")
wd <- getwd()
getwd()
tempwd <- ("data/breweriesChicago")
dir.create(tempwd)
setwd(tempwd)
getwd()
url <- "https://www.google.de/?#q=list+breweries+chicago"
browseURL(url)
url <- "http://thehopreview.com/blog/chicago-brewery-list"
content <- read_html(url, encoding = "utf8")
anchors <- html_nodes(content, css = "#block-yui_3_17_2_8_1438187725105_11398 p")
breweries <- html_text(anchors)
length(breweries)
head(breweries)
breweries <- breweries[-1]
head(breweries)
warnings()
warning()
locations <- str_extract(breweries, "[[:digit:]].+?–")
locations <- str_replace(locations, "–", ", Chicago, IL")
locations <- locations[!is.na(locations)]
if (!file.exists("breweries_geo.RData")){
pos <- geocode(locations, source = "google")
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
head(pos)
brewery_map <- get_map(location=c(lon=mean(pos$lon), lat=mean(pos$lat)), zoom="auto", maptype="hybrid")
p <- ggmap(brewery_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=3)
p
help("read_html")
help("html_nodes")
url <- "https://www.google.de/?#q=list+breweries+chicago"
browseURL(url)     ##rlg: accessing webpages--it pops up
head(content)
content
head(anchors)
help("html_text")
head(breweries)
if (!file.exists("breweries_geo.RData")){
pos <- geocode(locations, source = "google") ##rlg: geocode from ggmap package, querying google maps api
geocodeQueryCheck()
save(pos, file="breweries_geo.RData")
} else {
load("breweries_geo.RData")
}
head(pos)
geocodeQueryCheck()
help("get_map")
brewery_map <- get_map(location=c(lon=mean(pos$lon), lat=mean(pos$lat)), zoom="auto", maptype="hybrid")
p <- ggmap(brewery_map) + geom_point(data=pos, aes(x=lon, y=lat), col="red", size=2)
p
setwd(wd)
# set temporary working directory
tempwd <- ("data/wikipediaStatisticians")
dir.create(tempwd)
setwd(tempwd)
## step 1: inspect page
url <- "https://en.wikipedia.org/wiki/List_of_statisticians"
browseURL(url)
html <- read_html(url)
head(html)
html
anchors <- html_nodes(html, xpath="//a")
length(anchors) # probably too many?
anchors <- html_nodes(html, xpath="//ul/li/a[1]")
links <- html_attr(anchors, "href")
anchors
links
links_iffer <-
seq_along(links) >=
seq_along(links)[str_detect(links, "Odd_Aalen")] &
seq_along(links) <=
seq_along(links)[str_detect(links, "George_Kingsley_Zipf")] &
str_detect(links, "/wiki/")
links_index <- seq_along(links)[links_iffer]
links <- links[links_iffer]
length(links)
links
names <- html_attr(anchors, "title")[links_index]
names <- str_replace(names, " \\(.*\\)", "")
## step 4: fetch personal wiki pages
baseurl <- "http://en.wikipedia.org"
HTML <- list()
Fname <- str_c(basename(links), ".html")
URL <- str_c(baseurl, links)
# loop
for ( i in seq_along(links) ){
# url
url <- URL[i]
# fname
fname <- Fname[i]
# download
if ( !file.exists(fname) ) download.file(url, fname)
# read in files
HTML[[i]] <- read_html(fname)
}
head(fname)
fname
head(Fname)
head(HTML)
connections <- data.frame(from=NULL, to=NULL)
# loop
for (i in seq_along(HTML)) {
pslinks <- html_attr(
html_nodes(HTML[[i]], xpath="//p//a"), # note: only look for links in p sections; otherwise too many links collected
"href")
links_in_pslinks <- seq_along(links)[links %in% pslinks] ##rlg: loook to see if links match
links_in_pslinks <- links_in_pslinks[links_in_pslinks!=i]
connections <- rbind(
connections,
data.frame(
from=rep(i-1, length(links_in_pslinks)), # -1 for zero-indexing
to=links_in_pslinks-1 # here too
)
)
}
names(connections) <- c("from", "to")
head(connections)
connections <- rbind(
connections,
data.frame(from=connections$to,
to=connections$from)
)
## step 6: visualize connections
dir.create("figures")
connections$value <- 1
nodesDF <- data.frame(name = names, group = 1)
network_out <- forceNetwork(Links = connections, Nodes = nodesDF, Source = "from", Target = "to", Value = "value", NodeID = "name", Group = "group", zoom = TRUE, opacityNoHover = 3)
saveNetwork(network_out, file = 'connections.html')
browseURL("connections.html")
browseURL("https://www.buzzfeed.com/?country=us")
browseURL("http://flukeout.github.io/")
browseURL("https://www.jstatsoft.org/about/editorialTeam")
url <- "https://www.buzzfeed.com/?country=us"
url_parsed <- read_html(url)
class(url_parsed)
html_structure(url_parsed)
as_list(url_parsed)
html_structure(url_parsed)
as_list(url_parsed)
headings_nodes <- html_nodes(url_parsed, css = ".lede__link")
headings_
headings_nodes
headings <- html_text(headings_nodes)
headings
headings <- str_replace_all(headings, "\\n", "") %>% str_trim()
headings
url <- "https://www.jstatsoft.org/about/editorialTeam"
# 2. download static HTML behind the URL and parse it into an XML file
url_parsed <- read_html(url)
# 3. extract specific nodes with CSS (or XPath)
headings_nodes2 <- html_nodes(url_parsed, css = ".member a")
# 4. extract content from nodes
headings2 <- html_text(headings_nodes2)
headings2
#bonus:
# 1. specify URL
url <- "https://www.jstatsoft.org/about/editorialTeam"
# 2. download static HTML behind the URL and parse it into an XML file
url_parsed <- read_html(url)
# 3. extract specific nodes with CSS (or XPath)
headings_nodes3 <- html_nodes(url_parsed, css = ".member li")
# 4. extract content from nodes
headings3 <- html_text(headings_nodes3)
headings3
affilstats <- str_extract(headings3, "Statistics")
affilstats
affilmath <- str_extract(headings3, "Mathematics")
affilmath
length(affilstats)
length(!is.na(affilstats))
length(!is.na(affilstats))
count(!is.na(affilstats))
!is.na(affilstats)
affilstats[!is.na(affilstats)]
length(affilstats[!is.na(affilstats)])
length(affilmath[!is.na(affilstats)])
length(affilmath[!is.na(affilmath)])
affilpsych <- str_extract(headings3, "Psychology")
length(affilpsych[!is.na(affilpsych)])
affilpsych
affilAll <-affilstats+affilmath+affilpsych
affilAll <-c(affilstats, affilmath, affilpsych)
affilAll
length(affilstats[!is.na(affilstats)&!is.na(affilmath)])
library(mosaic)
cbind(affilstats, affilmath, affilpsych)
tallY(affilstats,affilmath)
data <- cbind(affilstats, affilmath, affilpsych)
tallY(affilstats~affilmath, data)
library(mosaic)
data <- cbind(affilstats, affilmath, affilpsych)
tallY(affilstats~affilmath, data)
tally(affilstats~affilmath, data)
tally(~affilmath, data)
dat <- cbind(affilstats, affilmath, affilpsych)
tally(~affilmath, dat)
table(affilstats~affilmath)
tab<-table(affilstats~affilmath)
tab
help("tally")
dat
tally(~affilmath|affilstats, dat)
mosaic::tally(~affilmath|affilstats, dat)
View(data)
rm(data)
mosaic::tally(~affilmath|affilstats, data=dat)
tally(~affilmath|affilstats, data=dat)
tally(~as.int(affilmath)|as.int(affilstats), data=dat)
tally(~as.factor(affilmath)|as.factor(affilstats), data=dat)
tally(~as.factor(affilmath)|as.factor(affilstats), data=dat, envir = parent.frame())
class(dat)
tally(~as.factor(affilmath)|as.factor(affilstats), data=as.dataframe(dat), envir = parent.frame())
tally(~as.factor(affilmath)|as.factor(affilstats), data=as.data.frame(as.table(dat)), envir = parent.frame())
url <- "https://en.wikipedia.org/wiki/Joint_Statistical_Meetings"
url_parsed <- read_html(url)
tables <- html_table(url_parsed, fill = TRUE)
tables
meetings <- tables[[2]]
class(meetings)
head(meetings)
table(meetings$Location) %>% sort()
browseurl("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
browseurl("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
browseURL("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
url <- "https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world"
url_parsed <- read_html(url)
tables <- html_table(url_parsed, fill = TRUE)##rlg: function html_table will find tables
tables
str(tables)
tables
head(tables)
tables[[8]]
tables[[7]]
tables[[9]]
tables[[3]]
tables[[2]]
head(tables[[2]])
head(tables[[3]])
head(tables[[7]])
browseURL("https://en.wikipedia.org/wiki/List_of_tallest_buildings_in_the_world")
table(buildings$Country/region) %>% sort()
buildings <- tables[[7]]
class(buildings)
head(buildings)
table(buildings$Country/region) %>% sort()
vignette("selectorgadget")
